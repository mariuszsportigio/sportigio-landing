---
import {
  defaultLanguage,
  getTranslations,
  localizeHref,
  type Language,
} from "../i18n";

type CTAStat = {
  value: string;
  label: string;
};

type CTAButton = {
  label: string;
  href: string;
};

interface CTAContent {
  badge?: string;
  title?: string;
  highlight?: string;
  subtitle?: string;
  primary_button?: CTAButton;
  secondary_button?: CTAButton;
  stats?: CTAStat[];
  trust?: string[];
}

interface Props {
  lang?: Language;
  content?: CTAContent;
}

const { lang = defaultLanguage, content: contentOverride } =
  Astro.props as Props;

const translations = getTranslations(lang) as any;
const fallbackTranslations =
  lang === defaultLanguage
    ? translations
    : (getTranslations(defaultLanguage) as any);

const translationContent = (translations?.landing?.cta ?? {}) as CTAContent;
const defaultContent = (fallbackTranslations?.landing?.cta ?? {}) as CTAContent;
const overrideContent = (contentOverride ?? {}) as CTAContent;

const pickString = (...values: Array<string | undefined>): string | undefined =>
  values.find((value) => typeof value === "string" && value.trim().length > 0);

const normalizeStats = (stats: CTAContent["stats"]): CTAStat[] => {
  if (!Array.isArray(stats)) return [];
  return stats
    .map((stat) => ({
      value: stat?.value ? String(stat.value) : "",
      label: stat?.label ? String(stat.label) : "",
    }))
    .filter((stat) => stat.value && stat.label);
};

const normalizeTrust = (trust: CTAContent["trust"]): string[] => {
  if (!Array.isArray(trust)) return [];
  return trust
    .map((item) => (typeof item === "string" ? item.trim() : ""))
    .filter(Boolean);
};

const normalizeButton = (button?: CTAButton | null): CTAButton | undefined => {
  if (!button) return undefined;
  const label = pickString(button.label);
  const href = pickString(button.href);
  if (!label || !href) return undefined;
  return { label, href };
};

const primaryButton = normalizeButton(overrideContent.primary_button) ??
  normalizeButton(translationContent.primary_button) ??
  normalizeButton(defaultContent.primary_button) ?? {
    label: lang === defaultLanguage ? "Rozpocznij za darmo" : "Start for free",
    href: "https://sportig.io/join",
  };

const secondaryButton = normalizeButton(overrideContent.secondary_button) ??
  normalizeButton(translationContent.secondary_button) ??
  normalizeButton(defaultContent.secondary_button) ?? {
    label: lang === defaultLanguage ? "Zobacz demo na żywo" : "See live demo",
    href: "https://sportig.io/join",
  };

const statsCandidates = [
  normalizeStats(overrideContent.stats),
  normalizeStats(translationContent.stats),
  normalizeStats(defaultContent.stats),
];

const fallbackStats = normalizeStats([
  {
    value: "100+",
    label: lang === defaultLanguage ? "Aktywnych klubów" : "Active clubs",
  },
  {
    value: "50k+",
    label:
      lang === defaultLanguage ? "Zadowolonych użytkowników" : "Happy users",
  },
  {
    value: "98%",
    label:
      lang === defaultLanguage ? "Wskaźnik zadowolenia" : "Satisfaction rate",
  },
]);

const stats = statsCandidates.find((list) => list.length > 0) ?? fallbackStats;

const trustCandidates = [
  normalizeTrust(overrideContent.trust),
  normalizeTrust(translationContent.trust),
  normalizeTrust(defaultContent.trust),
];

const fallbackTrust =
  lang === defaultLanguage
    ? ["30 dni za darmo", "Anuluj w każdym momencie", "Setup w 5 minut"]
    : ["30-day free trial", "Cancel anytime", "Setup in 5 minutes"];

const trust = trustCandidates.find((list) => list.length > 0) ?? fallbackTrust;

const badge = pickString(
  overrideContent.badge,
  translationContent.badge,
  defaultContent.badge,
  lang === defaultLanguage ? "Rozpocznij już dziś" : "Start today",
);

const title = pickString(
  overrideContent.title,
  translationContent.title,
  defaultContent.title,
  lang === defaultLanguage ? "Dołącz do nowej ery" : "Join the new era",
);

const highlight = pickString(
  overrideContent.highlight,
  translationContent.highlight,
  defaultContent.highlight,
  lang === defaultLanguage ? "klubów sportowych" : "of sports clubs",
);

const subtitle = pickString(
  overrideContent.subtitle,
  translationContent.subtitle,
  defaultContent.subtitle,
  lang === defaultLanguage
    ? "Ponad 100 klubów już korzysta z Sportigio. Dołącz do grona liderów, którzy wybrali nowoczesność, efektywność i wygodę."
    : "Over 100 clubs already use Sportigio. Join the leaders who chose modern, efficient, and convenient operations.",
);
---

<section class="relative py-12 overflow-hidden">
  <!-- Gradient Background -->
  <div class="absolute inset-0 sportigio-gradient-5"></div>

  <!-- Subtle Color Overlays -->
  <div class="absolute inset-0">
    <div
      class="absolute inset-0 bg-gradient-to-tr from-transparent via-accent/10 to-transparent"
    >
    </div>
    <div
      class="absolute inset-0 bg-gradient-to-bl from-secondary/8 via-transparent to-accent/6"
    >
    </div>
  </div>

  <!-- Background Pattern -->
  <div class="absolute inset-0 opacity-15">
    <div
      class="absolute top-8 left-8 w-24 h-24 bg-secondary/20 rounded-full blur-xl"
    >
    </div>
    <div
      class="absolute top-24 right-16 w-20 h-20 bg-accent/15 rounded-full blur-lg"
    >
    </div>
    <div
      class="absolute bottom-16 left-1/4 w-28 h-28 bg-white/10 rounded-full blur-2xl"
    >
    </div>
    <div
      class="absolute bottom-24 right-8 w-22 h-22 bg-secondary/12 rounded-full blur-xl"
    >
    </div>
    <div
      class="absolute top-1/2 left-1/3 w-26 h-26 bg-accent/8 rounded-full blur-2xl"
    >
    </div>
  </div>

  <div class="relative z-10 max-w-4xl mx-auto px-4 text-center">
    {
      badge && (
        <div class="inline-flex items-center px-4 py-2 bg-white/15 backdrop-blur-sm border border-white/20 rounded-full text-sm font-medium text-white mb-6">
          <svg
            class="w-4 h-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 10V3L4 14h7v7l9-11h-7z"
            />
          </svg>
          {badge}
        </div>
      )
    }

    <h2
      class="text-3xl lg:text-5xl font-extrabold text-white mb-6 leading-tight font-poppins"
    >
      {title}
      {
        highlight && (
          <span class="block text-transparent bg-clip-text bg-gradient-to-r from-secondary via-cyan-200 to-white">
            {highlight}
          </span>
        )
      }
    </h2>

    {
      subtitle && (
        <p class="text-base lg:text-lg text-gray-200 mb-6 max-w-3xl mx-auto leading-relaxed">
          {subtitle}
        </p>
      )
    }

    {
      stats.length > 0 && (
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {stats.map((stat) => (
            <div class="text-center">
              <div class="text-3xl lg:text-4xl font-extrabold text-white mb-2">
                {stat.value}
              </div>
              <div class="text-gray-300 text-sm">{stat.label}</div>
            </div>
          ))}
        </div>
      )
    }

    <div
      class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6"
    >
      <a
        href={localizeHref(primaryButton.href, lang)}
        class="bg-secondary text-primary group px-6 py-3 font-semibold text-sm rounded-xl transition-all duration-300 transform hover:scale-105 shadow-xl"
      >
        <span class="flex items-center">
          {primaryButton.label}
          <svg
            class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform duration-300"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </span>
      </a>

      <a
        href={localizeHref(secondaryButton.href, lang)}
        class="px-6 py-3 border-2 border-white/25 text-white font-semibold text-sm rounded-xl hover:bg-white/10 backdrop-blur-sm transition-all duration-300 transform hover:scale-105"
      >
        {secondaryButton.label}
      </a>
    </div>

    {
      trust.length > 0 && (
        <div class="flex flex-col sm:flex-row items-center justify-center gap-4 text-gray-300 text-sm">
          {trust.map((item) => (
            <div class="flex items-center">
              <svg
                class="w-4 h-4 mr-2 text-secondary"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M5 13l4 4L19 7"
                />
              </svg>
              {item}
            </div>
          ))}
        </div>
      )
    }
  </div>
</section>

<!-- Floating Elements Animation -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Add floating animation to background elements
    const floatingElements = document.querySelectorAll<HTMLElement>(
      '.absolute [class*="blur"]',
    );

    floatingElements.forEach((element, index) => {
      const animationDuration = 3 + index * 0.5; // Different speeds
      const animationDelay = index * 0.2; // Staggered start

      element.style.animation = `float ${animationDuration}s ease-in-out infinite`;
      element.style.animationDelay = `${animationDelay}s`;
    });
  });
</script>

<style>
  @keyframes float {
    0%,
    100% {
      transform: translateY(0px) scale(1);
    }
    50% {
      transform: translateY(-15px) scale(1.03);
    }
  }
</style>
