---
import { defaultLanguage, getTranslations, type Language } from "../i18n";

export interface TabItem {
  id: string;
  label: string;
  description?: string;
  bullets?: { title: string; desc?: string }[];
  imageSrc?: string;
  imageAlt?: string;
  icon?: string;
  paragraphs?: string[];
}

interface Props {
  lang?: Language;
  items?: TabItem[] | Record<string, TabItem>;
}

const { lang = defaultLanguage, items: itemsProp } = Astro.props as Props;

const translations = getTranslations(lang) as any;
const fallbackTranslations =
  lang === defaultLanguage
    ? translations
    : (getTranslations(defaultLanguage) as any);

const translationTabs = translations?.landing?.steps?.tabs;
const fallbackTabs = fallbackTranslations?.landing?.steps?.tabs;

type NormalizedBullet = { title: string; desc?: string };

type NormalizedTabItem = {
  id: string;
  label: string;
  description?: string;
  bullets: NormalizedBullet[];
  paragraphs: string[];
  icon?: string;
};

const normalizeTabItems = (value: any): NormalizedTabItem[] => {
  const source = Array.isArray(value)
    ? value
    : value && typeof value === "object"
      ? Object.values(value)
      : [];

  return source
    .map((item: any) => {
      const id = item?.id ?? item?.label;
      const label = item?.label ?? item?.id;
      if (!id || !label) return null;

      const icon = item?.icon ? String(item.icon) : undefined;
      const description = item?.description
        ? String(item.description)
        : undefined;

      const bullets: NormalizedBullet[] = Array.isArray(item?.bullets)
        ? item.bullets
            .map(
              (bullet: any): NormalizedBullet => ({
                title: bullet?.title ? String(bullet.title) : "",
                desc: bullet?.desc ? String(bullet.desc) : undefined,
              }),
            )
            .filter((bullet: NormalizedBullet) => bullet.title.length > 0)
        : [];

      const paragraphs = Array.isArray(item?.paragraphs)
        ? item.paragraphs
            .map((paragraph: any) => (paragraph ? String(paragraph) : ""))
            .filter(Boolean)
        : [];

      return {
        id: String(id),
        label: String(label),
        description,
        bullets,
        paragraphs,
        icon,
      } satisfies NormalizedTabItem;
    })
    .filter(Boolean) as NormalizedTabItem[];
};

const candidates: NormalizedTabItem[][] = [
  normalizeTabItems(itemsProp),
  normalizeTabItems(translationTabs),
  normalizeTabItems(fallbackTabs),
];

const normalizedItems =
  candidates.find((list) => list.length > 0) ?? normalizeTabItems([]);

const items =
  normalizedItems.length > 0
    ? normalizedItems
    : normalizeTabItems([
        {
          id: "chat",
          label:
            lang === defaultLanguage
              ? "Wybierz produkty i funkcje"
              : "Pick your products and features",
          description:
            lang === defaultLanguage
              ? "Wybierz od czego chcesz zacząć wg ogólnej oferty:"
              : "Tell us where you want to start from the overall offering:",
          bullets: [
            { title: lang === defaultLanguage ? "Strona www" : "Website" },
            {
              title: lang === defaultLanguage ? "Sklep online" : "Online shop",
            },
            { title: lang === defaultLanguage ? "Bilety" : "Tickets" },
          ],
          paragraphs: [
            lang === defaultLanguage
              ? "Podaj nam swoje potrzeby i preferencje. Dostosowujemy ofertę i wyślemy plan na Twoje wdrożenie."
              : "Share your needs and preferences. We tailor the offer and send an onboarding plan.",
          ],
          icon: "format_list_bulleted",
        },
      ]);
---

<section class="py-16 bg-white">
  <div class="max-w-6xl mx-auto px-4">
    <div class="grid grid-cols-1 md:grid-cols-[280px_1fr] gap-8">
      <!-- Left: vertical tabs -->
      <nav class="md:border-r md:pr-6 space-y-2">
        {
          items.map((item, idx) => (
            <button
              class="vtabs-btn w-full text-left px-4 py-3 rounded-lg transition flex items-center gap-3"
              data-tab={item.id}
              class:list={[idx === 0 ? "is-active" : ""]}
            >
              <span class="material-symbols-rounded vtabs-icon text-[#0B2360]">
                {item.icon || "bookmark"}
              </span>
              <span class="vtabs-label font-semibold text-gray-900">
                {item.label}
              </span>
            </button>
          ))
        }
      </nav>

      <!-- Right: content -->
      <div>
        {
          items.map((item, idx) => (
            <div
              class="vtabs-panel"
              data-panel={item.id}
              class:list={[idx === 0 ? "is-active" : "hidden"]}
            >
              <div class="vtabs-card relative overflow-hidden rounded-2xl border border-gray-100 bg-white/90 shadow-lg backdrop-blur-sm">
                <div class="absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-[#00052E0D] opacity-70" />
                <div class="relative z-10 p-6 md:p-8 flex flex-col gap-6">
                  <div class="flex items-center gap-4">
                    <div class="w-12 h-12 rounded-xl bg-primary/15 text-[#0B2360] flex items-center justify-center">
                      <span class="material-symbols-rounded text-2xl">
                        {item.icon || "bookmark"}
                      </span>
                    </div>
                    <h3 class="text-xl md:text-2xl font-semibold text-gray-900">
                      {item.label}
                    </h3>
                  </div>

                  {item.description && (
                    <p class="text-gray-700 leading-relaxed">
                      {item.description}
                    </p>
                  )}

                  {item.bullets.length > 0 && (
                    <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                      {item.bullets.map((bullet) => (
                        <li class="flex items-start gap-3 rounded-xl border border-gray-100 bg-white/85 px-4 py-3 shadow-sm">
                          <span class="material-symbols-rounded text-primary text-xl mt-0.5">
                            check_circle
                          </span>
                          <div>
                            <p class="text-gray-900 font-semibold">
                              {bullet.title}
                            </p>
                            {bullet.desc && (
                              <p class="text-gray-600 text-sm leading-relaxed">
                                {bullet.desc}
                              </p>
                            )}
                          </div>
                        </li>
                      ))}
                    </ul>
                  )}

                  {item.paragraphs.length > 0 && (
                    <div class="space-y-4">
                      {item.paragraphs.map((paragraph) => (
                        <p class="text-gray-700 leading-relaxed">{paragraph}</p>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <style>
    .vtabs-btn {
      @apply text-gray-600 bg-white;
    }
    .vtabs-btn:hover {
      @apply bg-slate-50;
    }
    .vtabs-btn.is-active {
      @apply text-white shadow;
      background: linear-gradient(
        55deg,
        #b31fd1 0%,
        #0b2360 36%,
        #00052e 72%,
        #01dfec 100%
      );
    }
    .vtabs-btn.is-active .vtabs-label {
      @apply text-white;
    }
    .vtabs-btn.is-active .vtabs-icon {
      @apply text-white;
    }
    .vtabs-panel {
      @apply hidden;
    }
    .vtabs-panel.is-active {
      @apply block;
    }
    .vtabs-card {
      box-shadow: 0 20px 45px rgba(11, 35, 96, 0.08);
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const buttons =
        document.querySelectorAll<HTMLButtonElement>(".vtabs-btn");
      const panels = document.querySelectorAll<HTMLDivElement>(".vtabs-panel");
      buttons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const id = btn.getAttribute("data-tab");
          buttons.forEach((b) => b.classList.remove("is-active"));
          panels.forEach((p) => {
            p.classList.remove("is-active");
            p.classList.add("hidden");
          });
          btn.classList.add("is-active");
          const target = document.querySelector<HTMLDivElement>(
            `[data-panel="${id}"]`,
          );
          if (target) {
            target.classList.add("is-active");
            target.classList.remove("hidden");
          }
        });
      });
    });
  </script>
</section>
