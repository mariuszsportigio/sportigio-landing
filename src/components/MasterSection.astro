---
// MasterSection.astro - Universal section container with Hero-inspired styling
export interface Props {
  id?: string;
  background?: 'default' | 'hero' | 'glass' | 'gradient' | 'navy' | 'white';
  padding?: 'none' | 'small' | 'medium' | 'large' | 'hero';
  container?: 'default' | 'narrow' | 'wide' | 'full';
  floatingElements?: boolean;
  particles?: boolean;
  overflow?: 'visible' | 'hidden';
  minHeight?: string;
  className?: string;
}

const {
  id,
  background = 'default',
  padding = 'medium',
  container = 'default',
  floatingElements = false,
  particles = false,
  overflow = 'visible',
  minHeight,
  className = ''
} = Astro.props;

const backgroundClasses = {
  default: 'bg-gradient-to-br from-slate-50 to-slate-100',
  hero: 'hero-glassmorphism',
  glass: 'glass-morphism',
  gradient: 'gradient-bg-animated',
  navy: 'bg-gradient-navy',
  white: 'bg-white'
};

const paddingClasses = {
  none: '',
  small: 'py-8',
  medium: 'py-16',
  large: 'py-24',
  hero: 'pt-24 pb-16'
};

const containerClasses = {
  default: 'max-w-7xl mx-auto px-4',
  narrow: 'max-w-4xl mx-auto px-4',
  wide: 'max-w-8xl mx-auto px-4',
  full: 'w-full px-4'
};

const sectionClasses = [
  'relative',
  backgroundClasses[background],
  paddingClasses[padding],
  overflow === 'hidden' ? 'overflow-hidden' : '',
  className
].filter(Boolean).join(' ');

const containerClass = containerClasses[container];
---

<section 
  {id} 
  class={sectionClasses}
  style={minHeight ? `min-height: ${minHeight}` : undefined}
>
  {floatingElements && (
    <>
      <div class="glass-orb glass-orb-1"></div>
      <div class="glass-orb glass-orb-2"></div>
      <div class="glass-orb glass-orb-3"></div>
    </>
  )}
  
  {particles && (
    <div class="particles-container absolute inset-0 pointer-events-none">
      <div class="particle" style="top: 20%; left: 10%; animation-delay: 0s;"></div>
      <div class="particle" style="top: 60%; left: 85%; animation-delay: 3s;"></div>
      <div class="particle" style="top: 80%; left: 30%; animation-delay: 6s;"></div>
      <div class="particle" style="top: 40%; left: 70%; animation-delay: 9s;"></div>
      <div class="particle" style="top: 10%; left: 50%; animation-delay: 12s;"></div>
    </div>
  )}
  
  <div class={`${containerClass} relative z-10`}>
    <slot />
  </div>
</section>

<style>
  /* Enhanced floating elements from Hero */
  .glass-orb {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: float 8s ease-in-out infinite;
    pointer-events: none;
  }

  .glass-orb-1 {
    width: 200px;
    height: 200px;
    top: 15%;
    left: 8%;
    background: linear-gradient(135deg, 
      rgba(11, 35, 96, 0.08) 0%, 
      rgba(1, 223, 236, 0.06) 100%
    );
    animation-delay: 0s;
  }

  .glass-orb-2 {
    width: 150px;
    height: 150px;
    top: 70%;
    right: 12%;
    background: linear-gradient(135deg, 
      rgba(234, 54, 225, 0.08) 0%, 
      rgba(11, 35, 96, 0.06) 100%
    );
    animation-delay: 3s;
  }

  .glass-orb-3 {
    width: 100px;
    height: 100px;
    top: 35%;
    right: 25%;
    background: linear-gradient(135deg, 
      rgba(1, 223, 236, 0.1) 0%, 
      rgba(234, 54, 225, 0.06) 100%
    );
    animation-delay: 6s;
  }

  /* Enhanced particles */
  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: radial-gradient(circle, rgba(1, 223, 236, 0.8) 0%, rgba(11, 35, 96, 0.3) 70%, transparent 100%);
    border-radius: 50%;
    animation: particleFloat 20s linear infinite;
  }

  @keyframes particleFloat {
    0% {
      transform: translateY(100vh) rotate(0deg);
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      transform: translateY(-100px) rotate(360deg);
      opacity: 0;
    }
  }

  /* Advanced glassmorphism variations */
  .glass-morphism {
    background: rgba(255, 255, 255, 0.12);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.18);
    position: relative;
  }

  .glass-morphism::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 50%, rgba(11, 35, 96, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(234, 54, 225, 0.08) 0%, transparent 50%),
      radial-gradient(circle at 60% 80%, rgba(1, 223, 236, 0.06) 0%, transparent 50%);
    pointer-events: none;
    z-index: -1;
  }

  /* Hero glassmorphism enhancement */
  .hero-glassmorphism {
    background: linear-gradient(135deg, 
      rgba(11, 35, 96, 0.08) 0%,
      rgba(1, 223, 236, 0.06) 35%,
      rgba(245, 245, 245, 0.05) 50%,
      rgba(1, 223, 236, 0.06) 65%,
      rgba(234, 54, 225, 0.08) 100%
    );
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    position: relative;
  }

  .hero-glassmorphism::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 10% 50%, rgba(11, 35, 96, 0.18) 0%, transparent 60%),
      radial-gradient(circle at 90% 30%, rgba(234, 54, 225, 0.15) 0%, transparent 60%),
      radial-gradient(circle at 50% 80%, rgba(1, 223, 236, 0.12) 0%, transparent 50%);
    filter: blur(40px);
    z-index: -1;
  }

  .hero-glassmorphism::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      linear-gradient(to bottom, 
        rgba(255, 255, 255, 0.85) 0%, 
        rgba(255, 255, 255, 0.6) 3%, 
        rgba(255, 255, 255, 0.2) 8%, 
        transparent 20%, 
        transparent 80%, 
        rgba(255, 255, 255, 0.2) 92%, 
        rgba(255, 255, 255, 0.6) 97%, 
        rgba(255, 255, 255, 0.85) 100%
      );
    pointer-events: none;
    z-index: 0;
  }

  /* Scroll animations for sections */
  section {
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInSection 0.8s ease-out forwards;
  }

  @keyframes fadeInSection {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .glass-orb-1 {
      width: 120px;
      height: 120px;
      top: 10%;
      left: 5%;
    }
    
    .glass-orb-2 {
      width: 100px;
      height: 100px;
      top: 75%;
      right: 8%;
    }
    
    .glass-orb-3 {
      width: 80px;
      height: 80px;
      top: 40%;
      right: 20%;
    }
    
    .particle {
      width: 2px;
      height: 2px;
    }
  }
</style>